<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />

    <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
    <link
      href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css"
      rel="stylesheet"
    />

    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <style>
      .marker {
        display: block;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        padding: 0;
      }
    </style>
    <div
      style="
        display: flex;
        justify-content: center;
        align-items: center;
        width: 98.7vw;
        height: 99vh;
      "
    >
      <!-- <div id="map" style="width: 90vw; height: 90vh"></div> -->
      <!-- <script> 
        // TO MAKE THE MAP APPEAR YOU MUST
        // ADD YOUR ACCESS TOKEN FROM
        // https://account.mapbox.com
        // mapboxgl.accessToken =
        //   "pk.eyJ1Ijoia2FzdW5ncDIyIiwiYSI6ImNsaHJlZTVmeDAydjMzY24zcDI5OG9qdjIifQ.6o1VJpDKm2-wiu5R85M-aA";
        // const geojson = {
        //   type: "geojson",
        //   data: {
        //     type: "FeatureCollection",
        //     features: [
        //       {
        //         // feature for Mapbox DC
        //         type: "Feature",
        //         geometry: {
        //           type: "Point",
        //           coordinates: [79.861244, 6.927079],
        //         },
        //         properties: {
        //           message: "Baz",
        //           iconSize: [40, 40],
        //         },
        //       },
        //       {
        //         // feature for Mapbox SF
        //         type: "Feature",
        //         geometry: {
        //           type: "Point",
        //           coordinates: [80.636696, 7.291418],
        //         },
        //         properties: {
        //           message: "Baz",
        //           iconSize: [40, 40],
        //         },
        //       },
        //     ],
        //   },
        // };

        // const map = new mapboxgl.Map({
        //   container: "map", // container ID
        //   style: "mapbox://styles/mapbox/streets-v12", // style URL
        //   center: [80.636696, 7.291418], // starting position [lng, lat]
        //   zoom: 7, // starting zoom
        // });

        // Add markers to the map.
        // for (const marker of geojson.features) {
        //   // Create a DOM element for each marker.
        //   const el = document.createElement("div");
        //   const width = marker.properties.iconSize[0];
        //   const height = marker.properties.iconSize[1];
        //   el.className = "marker";
        //   el.style.backgroundImage = `url(https://placekitten.com/g/${width}/${height}/)`;
        //   el.style.width = `${width}px`;
        //   el.style.height = `${height}px`;
        //   el.style.backgroundSize = "100%";

        //   el.addEventListener("click", () => {
        //     window.alert(marker.properties.message);
        //   });

        //   // Add markers to the map.
        //   new mapboxgl.Marker(el)
        //     .setLngLat(marker.geometry.coordinates)
        //     .addTo(map);
        // }

        map.addControl(
          new mapboxgl.GeolocateControl({
            positionOptions: {
              enableHighAccuracy: true,
            },
            // When active the map will receive updates to the device's location as it changes.
            trackUserLocation: true,
            // Draw an arrow next to the location dot to indicate which direction the device is heading.
            showUserHeading: true,
          })
        );
      </script> -->
    <!-- </div> -->
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
